#include <stdio.h>

void main()
{
    int Arr[5] = {12, 56, 34, 78, 100};
    int largest = Arr[0]; 
    for (int i = 1; i < 5; i++) 
    {
        if (Arr[i] > largest)   
    
      largest = Arr[i];    
    }                           
    printf("The largest element in the array is: %d\n", largest);

   question-2
   
   #include <stdio.h>
void main() 
{
    int arr[100], i, n, firstLargest, secondLargest;
    printf("Enter the number of elements ");
    scanf("%d", &n);
    printf("Enter the elements of the array");
    for(i = 0; i < n; i++) 
    {
        scanf("%d",&arr[i]);
    }
    if(arr[0] > arr[1]) {
        firstLargest = arr[0];
        secondLargest = arr[1];
    }
    else
    {
        firstLargest = arr[1];
        secondLargest = arr[0];
    }
    for(i = 2; i < n; i++) {
        if(arr[i] > firstLargest) 
        {
            secondLargest = firstLargest;
            firstLargest = arr[i];
        }
        else if(arr[i] > secondLargest) 
        {
            secondLargest = arr[i];
        }
    }
    printf("The FIRST LARGEST = %d\
    
    
    
    
    
    
    
    QUESTION-3
    
    
    #include <stdio.h>
int minJumps(int arr[], int n)
{
if (n <= 1)
{
return 0;
}
if (arr[0] == 0) 
{
return -1;
}
int maxReach = arr[0];
int step = arr[0];
int jump = 1;
for (int i = 1; i < n; i++)
{
if (i == n - 1) 
{
return jump;
}
maxReach = (maxReach > i + arr[i]) ? maxReach : i + arr[i];
step--;
if (step == 0) 
{
jump++;
if (i >= maxReach)
{
return -1;
}
step = maxReach - i;
}
}
return -1;
}
int main() 
{
int arr[] = {2, 3, 1, 1, 2, 4, 2, 0, 1, 1};
int n = sizeof(arr) / sizeof(arr[0]);
int min_jumps = minJumps(arr, n);
printf("Minimum number of jumps required to reach the end of the array: %d", min_jumps);
}












QUESTION-4


#include<stdio.h>

void main()
{
    int arr[] = {4, 8, 1, 9, 2, 6, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_diff = arr[1] - arr[0];
    int min_element = arr[0];

    for (int i = 1; i < n; i++) {
        if (arr[i] - min_element > max_diff) 
        {
            max_diff = arr[i] - min_element;
        }
        if (arr[i] < min_element)
        {
            min_element = arr[i];
        }
    }

    printf("The maximum difference between two elements in the array is: %d\n", max_diff);
}






QUESTION-5


#include <stdio.h>
void main()
{
    int arr[10] = {2, 4, 5, 2, 6, 4, 5, 8, 9, 1};
    int n = 10;
    int i, j, k;

    for (i = 0; i < n; i++) 
    {
        for (j = i + 1; j < n; j++)
        {
            if (arr[i] == arr[j])
            {
                for (k = j; k < n; k++) 
                {
                    arr[k] = arr[k + 1];
                }
                n--; 
                j--; 
            }
        }
    }
    printf("Array without duplicates: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}




QUESTION-6


#include <stdio.h>
    void main()
    {

        long int ARR[10], ODD[10], EVEN[10];
        int i, j = 0, k = 0, n;

        printf("Enter the size of array  ");
        scanf("%d", &n);

        printf("Enter the elements of the array ");
        for (i = 0; i < n; i++)
        {
            scanf("%ld", &ARR[i]);
            fflush(stdin);
        }

        for (i = 0; i < n; i++)
        {
            if (ARR[i] % 2 == 0)
            {
                EVEN[j] = ARR[i];
                j++;
            }
            else
            {
                ODD[k] = ARR[i];
                k++;
            }
        }

        printf("The elements of ODD are");
        for (i = 0; i < k; i++)
        {
            printf("%d\n", ODD[i]);
        }

        printf("The elements of EVEN are ");
        for (i = 0; i < j; i++)
        {
            printf("%d\n", EVEN[i]);
        }

    }






QUESTION-7


#include <stdio.h>
#define N 1000

int main() {
    int arr[N];

    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    printf("Enter an array: ");
    for (int i = 0; i< n; i++){
        scanf("%d", &arr[i]);
    }
    printf("Reversed array: ");
    for (int i = n-1; i>=0; i--){
        printf("%d ", arr[i]);
    }

    return 0;
    
    
    
    
    
    QUESTION-8
    
    
    #include <stdio.h>

void  main() {
    int arr[10] = {1, 2, 3, 2, 1, 2, 3, 1, 2, 3};
    int freq[10];
    int i, j, count;

    for (i = 0; i < 10; i++)
    {
        count = 1;
        for (j = i+1; j < 10; j++)
        {
            if (arr[i] == arr[j])
            {
                count++;
                freq[j] = 0;
            }
        }
        if (freq[i] != 0)
        {
            freq[i] = count;
        }
    }

    printf("Frequency of each element in the array:\n");
    for (i = 0; i < 10; i++) {
        if (freq[i] != 0) {
            printf("%d occurs %d times\n", arr[i], freq[i]);
        }
    }
    
    
    
    
    
    QUESTION-9
    
    
    #include <stdio.h>
    void main ()
    {

        int number[30];

        int i, j, a, n;
        printf("Enter the value of N\n");
        scanf("%d", &n);

        printf("Enter the numbers \n");
        for (i = 0; i < n; ++i)
	        scanf("%d", &number[i]);

        /*  sorting begins ... */

        for (i = 0; i < n; ++i)
        {
            for (j = i + 1; j < n; ++j)
            {
                if (number[i] < number[j])
                {
                    a = number[i];
                    number[i] = number[j];
                    number[j] = a;
                }
            }
        }

        printf("The numbers arranged in descending order are given below\n");

        for (i = 0; i < n; ++i)
        {
            printf("%d\n", number[i]);
        }
        }
        
        
        
        
        
        
        QUESTION-10
        
        
        #include <stdio.h>
int minJumps(int arr[], int n)
{
if (n <= 1)
{
return 0;
}
if (arr[0] == 0) 
{
return -1;
}
int maxReach = arr[0];
int step = arr[0];
int jump = 1;
for (int i = 1; i < n; i++)
{
if (i == n - 1) 
{
return jump;
}
maxReach = (maxReach > i + arr[i]) ? maxReach : i + arr[i];
step--;
if (step == 0) 
{
jump++;
if (i >= maxReach)
{
return -1;
}
step = maxReach - i;
}
}
return -1;
}
int main() 
{
int arr[] = {2, 3, 1, 1, 2, 4, 2, 0, 1, 1};
int n = sizeof(arr) / sizeof(arr[0]);
int min_jumps = minJumps(arr, n);
printf("Minimum number of jumps required to reach the end of the array: %d", min_jumps);
}
